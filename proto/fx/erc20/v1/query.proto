syntax = "proto3";
package fx.erc20.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/functionx/go-sdk/erc20";

// Owner enumerates the ownership of a ERC20 contract.
enum Owner {
  option (gogoproto.goproto_enum_prefix) = false;
  // OWNER_UNSPECIFIED defines an invalid/undefined owner.
  OWNER_UNSPECIFIED = 0;
  // OWNER_MODULE erc20 is owned by the erc20 module account.
  OWNER_MODULE = 1;
  // EXTERNAL erc20 is owned by an external account.
  OWNER_EXTERNAL = 2;
}

// Query defines the gRPC querier service.
service Query {
  // Retrieves a registered token pair
  rpc TokenPair(QueryTokenPairRequest) returns (QueryTokenPairResponse) {}
}

// QueryTokenPairRequest is the request type for the Query/TokenPair RPC method.
message QueryTokenPairRequest {
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 1;
}

// QueryTokenPairResponse is the response type for the Query/TokenPair RPC
// method.
message QueryTokenPairResponse {
  TokenPair token_pair = 1 [ (gogoproto.nullable) = false ];
}

// TokenPair defines an instance that records pairing consisting of a Cosmos
// native Coin and an ERC20 token address.
message TokenPair {
  option (gogoproto.equal) = true;
  // address of ERC20 contract token
  string erc20_address = 1;
  // cosmos base denomination to be mapped to
  string denom = 2;
  // shows token mapping enable status
  bool enabled = 3;
  // ERC20 owner address ENUM (0 invalid, 1 ModuleAccount, 2 external address)
  Owner contract_owner = 4;
}