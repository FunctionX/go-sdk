// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos_proto/cosmos.proto

package proto

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScalarType int32

const (
	ScalarType_SCALAR_TYPE_UNSPECIFIED ScalarType = 0
	ScalarType_SCALAR_TYPE_STRING      ScalarType = 1
	ScalarType_SCALAR_TYPE_BYTES       ScalarType = 2
)

var ScalarType_name = map[int32]string{
	0: "SCALAR_TYPE_UNSPECIFIED",
	1: "SCALAR_TYPE_STRING",
	2: "SCALAR_TYPE_BYTES",
}

var ScalarType_value = map[string]int32{
	"SCALAR_TYPE_UNSPECIFIED": 0,
	"SCALAR_TYPE_STRING":      1,
	"SCALAR_TYPE_BYTES":       2,
}

func (x ScalarType) String() string {
	return proto.EnumName(ScalarType_name, int32(x))
}

func (ScalarType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_706f3b7c96e3f128, []int{0}
}

// InterfaceDescriptor describes an interface type to be used with
// accepts_interface and implements_interface and declared by declare_interface.
type InterfaceDescriptor struct {
	// name is the name of the interface. It should be a short-name (without
	// a period) such that the fully qualified name of the interface will be
	// package.name, ex. for the package a.b and interface named C, the
	// fully-qualified name will be a.b.C.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description is a human-readable description of the interface and its
	// purpose.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *InterfaceDescriptor) Reset()         { *m = InterfaceDescriptor{} }
func (m *InterfaceDescriptor) String() string { return proto.CompactTextString(m) }
func (*InterfaceDescriptor) ProtoMessage()    {}
func (*InterfaceDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_706f3b7c96e3f128, []int{0}
}
func (m *InterfaceDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceDescriptor.Merge(m, src)
}
func (m *InterfaceDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceDescriptor proto.InternalMessageInfo

func (m *InterfaceDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// ScalarDescriptor describes an scalar type to be used with
// the scalar field option and declared by declare_scalar.
// Scalars extend simple protobuf built-in types with additional
// syntax and semantics, for instance to represent big integers.
// Scalars should ideally define an encoding such that there is only one
// valid syntactical representation for a given semantic meaning,
// i.e. the encoding should be deterministic.
type ScalarDescriptor struct {
	// name is the name of the scalar. It should be a short-name (without
	// a period) such that the fully qualified name of the scalar will be
	// package.name, ex. for the package a.b and scalar named C, the
	// fully-qualified name will be a.b.C.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description is a human-readable description of the scalar and its
	// encoding format. For instance a big integer or decimal scalar should
	// specify precisely the expected encoding format.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// field_type is the type of field with which this scalar can be used.
	// Scalars can be used with one and only one type of field so that
	// encoding standards and simple and clear. Currently only string and
	// bytes fields are supported for scalars.
	FieldType []ScalarType `protobuf:"varint,3,rep,packed,name=field_type,json=fieldType,proto3,enum=cosmos_proto.ScalarType" json:"field_type,omitempty"`
}

func (m *ScalarDescriptor) Reset()         { *m = ScalarDescriptor{} }
func (m *ScalarDescriptor) String() string { return proto.CompactTextString(m) }
func (*ScalarDescriptor) ProtoMessage()    {}
func (*ScalarDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_706f3b7c96e3f128, []int{1}
}
func (m *ScalarDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalarDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScalarDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScalarDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalarDescriptor.Merge(m, src)
}
func (m *ScalarDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *ScalarDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalarDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ScalarDescriptor proto.InternalMessageInfo

func (m *ScalarDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScalarDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ScalarDescriptor) GetFieldType() []ScalarType {
	if m != nil {
		return m.FieldType
	}
	return nil
}

var E_ImplementsInterface = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MessageOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         93001,
	Name:          "cosmos_proto.implements_interface",
	Tag:           "bytes,93001,rep,name=implements_interface",
	Filename:      "cosmos_proto/cosmos.proto",
}

var E_AcceptsInterface = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         93001,
	Name:          "cosmos_proto.accepts_interface",
	Tag:           "bytes,93001,opt,name=accepts_interface",
	Filename:      "cosmos_proto/cosmos.proto",
}

var E_Scalar = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         93002,
	Name:          "cosmos_proto.scalar",
	Tag:           "bytes,93002,opt,name=scalar",
	Filename:      "cosmos_proto/cosmos.proto",
}

var E_DeclareInterface = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FileOptions)(nil),
	ExtensionType: ([]*InterfaceDescriptor)(nil),
	Field:         793021,
	Name:          "cosmos_proto.declare_interface",
	Tag:           "bytes,793021,rep,name=declare_interface",
	Filename:      "cosmos_proto/cosmos.proto",
}

var E_DeclareScalar = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FileOptions)(nil),
	ExtensionType: ([]*ScalarDescriptor)(nil),
	Field:         793022,
	Name:          "cosmos_proto.declare_scalar",
	Tag:           "bytes,793022,rep,name=declare_scalar",
	Filename:      "cosmos_proto/cosmos.proto",
}

func init() {
	proto.RegisterEnum("cosmos_proto.ScalarType", ScalarType_name, ScalarType_value)
	proto.RegisterType((*InterfaceDescriptor)(nil), "cosmos_proto.InterfaceDescriptor")
	proto.RegisterType((*ScalarDescriptor)(nil), "cosmos_proto.ScalarDescriptor")
	proto.RegisterExtension(E_ImplementsInterface)
	proto.RegisterExtension(E_AcceptsInterface)
	proto.RegisterExtension(E_Scalar)
	proto.RegisterExtension(E_DeclareInterface)
	proto.RegisterExtension(E_DeclareScalar)
}

func init() { proto.RegisterFile("cosmos_proto/cosmos.proto", fileDescriptor_706f3b7c96e3f128) }

var fileDescriptor_706f3b7c96e3f128 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0x8e, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x87, 0x70, 0xf4, 0xc0, 0x1c, 0x21, 0x1e,
	0x64, 0x29, 0x29, 0x85, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0x30, 0x2f, 0xa9, 0x34, 0x4d,
	0x3f, 0x25, 0xb5, 0x38, 0xb9, 0x28, 0xb3, 0xa0, 0x24, 0xbf, 0x08, 0xa2, 0x5e, 0xc9, 0x9b, 0x4b,
	0xd8, 0x33, 0xaf, 0x24, 0xb5, 0x28, 0x2d, 0x31, 0x39, 0xd5, 0x05, 0x2e, 0x29, 0x24, 0xc4, 0xc5,
	0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x0b, 0x29, 0x70,
	0x71, 0xc3, 0xb4, 0x67, 0xe6, 0xe7, 0x49, 0x30, 0x81, 0xa5, 0x90, 0x85, 0x94, 0x1a, 0x19, 0xb9,
	0x04, 0x82, 0x93, 0x13, 0x73, 0x12, 0x8b, 0x28, 0x35, 0x4a, 0xc8, 0x9c, 0x8b, 0x2b, 0x2d, 0x33,
	0x35, 0x27, 0x25, 0xbe, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x59, 0x81, 0x59, 0x83, 0xcf, 0x48, 0x42,
	0x0f, 0xd9, 0x73, 0x7a, 0x10, 0x9b, 0x42, 0x2a, 0x0b, 0x52, 0x83, 0x38, 0xc1, 0x6a, 0x41, 0x4c,
	0xad, 0x08, 0x2e, 0x2e, 0x84, 0x84, 0x90, 0x34, 0x97, 0x78, 0xb0, 0xb3, 0xa3, 0x8f, 0x63, 0x50,
	0x7c, 0x48, 0x64, 0x80, 0x6b, 0x7c, 0xa8, 0x5f, 0x70, 0x80, 0xab, 0xb3, 0xa7, 0x9b, 0xa7, 0xab,
	0x8b, 0x00, 0x83, 0x90, 0x18, 0x97, 0x10, 0xb2, 0x64, 0x70, 0x48, 0x90, 0xa7, 0x9f, 0xbb, 0x00,
	0xa3, 0x90, 0x28, 0x97, 0x20, 0xb2, 0xb8, 0x53, 0x64, 0x88, 0x6b, 0xb0, 0x00, 0x93, 0x55, 0x08,
	0x97, 0x48, 0x66, 0x6e, 0x41, 0x4e, 0x6a, 0x6e, 0x6a, 0x5e, 0x49, 0x71, 0x7c, 0x26, 0x2c, 0xd4,
	0x84, 0xe4, 0xf5, 0x20, 0xa1, 0xac, 0x07, 0x0b, 0x65, 0x3d, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4,
	0x54, 0x7f, 0xb0, 0x57, 0x8a, 0x25, 0x4e, 0x5e, 0x63, 0x55, 0x60, 0xd6, 0xe0, 0x0c, 0x12, 0x46,
	0x68, 0x87, 0x87, 0xb9, 0x95, 0x0f, 0x97, 0x60, 0x62, 0x72, 0x72, 0x6a, 0x01, 0x8a, 0x91, 0xb2,
	0x18, 0x46, 0xba, 0x81, 0x3c, 0x88, 0x6c, 0x20, 0x28, 0xc4, 0x04, 0xa0, 0x3a, 0x11, 0xa6, 0x99,
	0x73, 0xb1, 0x15, 0x83, 0x7d, 0x4f, 0xc8, 0x88, 0x53, 0x50, 0x23, 0xa0, 0xca, 0xad, 0xf2, 0xb8,
	0x04, 0x53, 0x52, 0x93, 0x73, 0x12, 0x8b, 0x52, 0x91, 0x9c, 0x21, 0x83, 0xc5, 0x8c, 0x1c, 0xb8,
	0xb7, 0xf6, 0x6e, 0x36, 0x50, 0x60, 0xd6, 0xe0, 0x36, 0x52, 0x44, 0x8d, 0x16, 0x2c, 0xc9, 0x29,
	0x48, 0x00, 0x6a, 0x36, 0xc2, 0xa1, 0xa9, 0x5c, 0x7c, 0x30, 0xfb, 0xa0, 0x0e, 0xc6, 0x6f, 0xd9,
	0x3e, 0xa8, 0x65, 0x72, 0xd8, 0xd2, 0x00, 0x92, 0x4d, 0xbc, 0x50, 0x53, 0x21, 0x12, 0x4e, 0xd6,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72,
	0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x98, 0x9e, 0x59, 0x92, 0x51,
	0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x56, 0x9a, 0x97, 0x0c, 0xb2, 0xa6, 0x42, 0x3f, 0x3d,
	0x5f, 0xb7, 0x38, 0x25, 0x1b, 0x9a, 0x5f, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x4a, 0xd8, 0x35, 0xe6, 0x6f, 0x03, 0x00, 0x00,
}

func (m *InterfaceDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScalarDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalarDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FieldType) > 0 {
		dAtA2 := make([]byte, len(m.FieldType)*10)
		var j1 int
		for _, num := range m.FieldType {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCosmos(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCosmos(dAtA []byte, offset int, v uint64) int {
	offset -= sovCosmos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfaceDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	return n
}

func (m *ScalarDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	if len(m.FieldType) > 0 {
		l = 0
		for _, e := range m.FieldType {
			l += sovCosmos(uint64(e))
		}
		n += 1 + sovCosmos(uint64(l)) + l
	}
	return n
}

func sovCosmos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCosmos(x uint64) (n int) {
	return sovCosmos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfaceDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosmos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosmos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScalarDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScalarDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScalarDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v ScalarType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCosmos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ScalarType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FieldType = append(m.FieldType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCosmos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCosmos
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCosmos
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FieldType) == 0 {
					m.FieldType = make([]ScalarType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ScalarType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCosmos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ScalarType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FieldType = append(m.FieldType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCosmos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosmos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCosmos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCosmos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCosmos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCosmos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCosmos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCosmos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCosmos = fmt.Errorf("proto: unexpected end of group")
)
